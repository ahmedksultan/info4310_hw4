<html>
    <head>
        <title>INFO 4310 - HW4</title>

        <!-- Loading scripts -->
        <script src="https://d3js.org/d3.v5.min.js"></script>

        <link rel="preconnect" href="https://fonts.googleapis.com">
        <link rel="preconnect" href="https://fonts.gstatic.com" crossorigin>
        <link href="https://fonts.googleapis.com/css2?family=Roboto+Condensed:ital,wght@0,100..900;1,100..900&display=swap" rel="stylesheet">

        <!-- Styling -->
        <style>

            body {
                background-color: #f0f0f0;
                justify-items: center;
            }

            .header {
                padding-top: 4em;
                padding-left: 4em;
                font-family: 'Roboto Condensed';
            }

            .page-title { 
                margin: 0;
                font-size: 48px;
            }

            .header p { 
                margin: 0;
                font-size: 16px;
            }

            text {
                font-family: 'Roboto Condensed';
            }

            .toggle-holder {
                padding-left:7em;
                padding-top: 10px;
            }

            #container {
                padding-left: 4em;
            }

            .title-text {
                font-size: 30px;
            }

        </style>
    </head>

    <body>

        <div class="header">
            <!-- ALL : Maybe an explanation or better title/subtitle could be helpful -->
            <h1 class="page-title"> What Do Men Think It Means To Be A Man? </h1>
            <br>
            <p>by <b>Carly Hu</b> (ch862), <b>Myna Lim</b> (ml2326), <b>Ahmed Sultan</b> (aks264), and <b>Sydney Wan</b> (ssw73) for Prof. Rzeszotarski's INFO 4310 class</p>
            <p style="color: grey; ">&emsp;<i>(original data and reporting by <b>Ella Koeze</b> and <b>Anna Maria Barry-Jester</b> for <a href="https://fivethirtyeight.com/features/what-do-men-think-it-means-to-be-a-man/">FiveThirtyEight</a>)</i></p>
        </div>
        <div class="toggle-holder" height="500" width="200" >

            <svg id="toggle-menu" height="100" width="500"></svg>


        </div>

        <div id="container">
            <!-- ALL : This is where our visualizations will go !!!!!!!!1! -->
            <svg id="chart" height="500" width="600" style="border: 1px solid blue;"></svg>


        </div>
        
        <script>
            const requestData = async function() {
                const surveyData = await d3.json("data/masc_survey_formatted.json");
                const svg = d3.select("#chart");
                let margin = { top: 50, bottom: 40, right: 10, left: 50 }
                const width = svg.attr("width");
                const height = svg.attr("height");
                const chartWidth = width - margin.left - margin.right;
                const chartHeight = height - margin.top - margin.bottom;

                let annotations = svg.append("g").attr("id","annotations");
                let chartArea = svg.append("g").attr("id","points")
                    .attr("transform",`translate(${margin.left},${margin.top})`);

                //Adding Icons for the toggle bar at the top
                const categories = ["Masculinity", "Lifestyle", "Work", "Relationships"];
                const images = ['society.png', 'mirror.png', 'briefcase.png', 'rose.png'];

                const svg_toggle = d3.select("#toggle-menu");

                svg_toggle.selectAll("image")
                           .data(images)
                           .join("image")
                           .attr("xlink:href", (d, i) => `data/${images[i]}`)
                           .attr("width", 60)
                           .attr("height", 60)
                           .attr("x", (d, i) => i*100+10)
                           .attr("y", 10)
                           .on('mouseover', function () {
                                d3.select(this).style("opacity", "0.6");
                           })
                           .on('mouseout', function () {
                                d3.select(this).style("opacity", "1");
                           })
                           .on('click', mouseEntersState);

                svg_toggle.selectAll("text")
                              .data(categories)
                              .enter()
                              .append("text")
                              .text(function(d, i){return categories[i];})
                              .attr("x", (d, i) => i*100+35)
                              .attr("y", 90)
                              .style("text-anchor", "middle");

                const titlebar = svg.append("g").attr("transform", "translate("+margin.left+","+margin.top+")");
                console.log(surveyData);
                updateChart(0);

                function updateChart(question_num) {
                    const data = surveyData[question_num] //its calling the first survery question
                    const data_formatted = Object.entries(data["adults"]).map(([key, value]) => ({
                                                            key: key,
                                                            value: value
                                                            }));

                    const percentScale = d3.scaleLinear().domain([0,100]).range([chartHeight, 0]);
                    let leftAxis = d3.axisLeft(percentScale);
                    //.tickFormat(d3.format('.0%'));
                    let leftGridlines = d3.axisLeft(percentScale)
                                        .tickSize(-chartWidth-10)
                                        .tickFormat("")
                    annotations.append("g")
                            .attr("class", "y axis")
                            .attr("transform",`translate(${margin.left-10},${margin.top})`)
                            .call(leftAxis)
                    annotations.append("g")
                            .attr("class", "y gridlines")
                            .attr("transform",`translate(${margin.left-10},${margin.top})`)
                            .call(leftGridlines);

                    let bottomAxis = d3.axisBottom()
                    let bottomAxisG = annotations.append("g")
                                            .attr("class", "x axis")
                                            .attr("transform",`translate(${margin.left},${chartHeight+margin.top+10})`)

                    
                    
                    const answer = d3.keys(data['adults']); //getting the x-axis answers
                    const answerScale = d3.scaleBand().domain(answer).range([0, chartWidth])
                                                    .padding(0.05);
                    
                    bottomAxis.scale(answerScale)
                    bottomAxisG.transition().call(bottomAxis);

                    chartArea.selectAll('rect.bar').data(data_formatted) //like WHY IS IT NOT WORKING
                            .join('rect')
                            .attr('class','bar')
                            .attr("fill", "steelblue")
                            .attr("x", (d) => answerScale(d['key']))
                            .attr("y", (d) => percentScale(d['value'])) 
                            .attr("stroke", "black")
                            .attr("height", (d) => percentScale(0) - percentScale(d['value']))
                            .attr("width", answerScale.bandwidth())
                }
                

   
                
                //function for when user clicks on an icon
                function mouseEntersState() {
                    titlebar.html("");
                    const selected = d3.select(this);
                    const image_name = selected._groups[0][0].__data__;

                    //Changing the title name...later graphs will dynamically change
                    const title = categories[images.indexOf(image_name)];

                    titlebar.append("text")
                            .text(title)
                            .attr("class", "title-text");
                }


            }

            requestData();
            

            

            
        </script>

    </body>
</html>